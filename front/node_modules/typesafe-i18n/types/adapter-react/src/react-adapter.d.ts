import React from 'react';
import type { BaseFormatters, BaseTranslation, TranslationFunctions } from '../../core';
import type { AsyncFormattersInitializer, FormattersInitializer, TranslationLoader, TranslationLoaderAsync } from '../../runtime/src/util.loader';
export declare type I18nContextType<L extends string = string, T extends BaseTranslation | BaseTranslation[] = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>> = {
    setLocale: (locale: L) => Promise<void>;
    isLoadingLocale: boolean;
    locale: L;
    LL: TF;
};
export declare type TypesafeI18nProps<L extends string> = {
    initialLocale?: L;
};
export declare type ReactInit<L extends string = string, T extends BaseTranslation | BaseTranslation[] = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>> = {
    component: React.FunctionComponent<TypesafeI18nProps<L>>;
    context: React.Context<I18nContextType<L, T, TF>>;
};
export declare const initI18nReact: <L extends string = string, T extends BaseTranslation = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>, F extends BaseFormatters = BaseFormatters>(baseLocale?: L, getTranslationForLocale?: TranslationLoader<L, T> | TranslationLoaderAsync<L, T>, initFormatters?: FormattersInitializer<L, F> | AsyncFormattersInitializer<L, F>) => ReactInit<L, T, TF>;
