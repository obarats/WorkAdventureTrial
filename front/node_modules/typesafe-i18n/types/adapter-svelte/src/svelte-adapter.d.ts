import type { Readable } from 'svelte/store';
import type { BaseFormatters, BaseTranslation, TranslationFunctions } from '../../core';
import type { AsyncFormattersInitializer, FormattersInitializer, TranslationLoader, TranslationLoaderAsync } from '../../runtime/src/util.loader';
export declare type SvelteStoreInit<L extends string = string, T extends BaseTranslation | BaseTranslation[] = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>, F extends BaseFormatters = BaseFormatters> = {
    initI18n: (newLocale: L, getTranslationForLocaleCallback: TranslationLoader<L, T> | TranslationLoaderAsync<L, T>, initFormattersCallback?: FormattersInitializer<L, F> | AsyncFormattersInitializer<L, F>) => Promise<void>;
    setLocale: (locale: L) => Promise<void>;
    isLoadingLocale: Readable<boolean>;
    locale: Readable<L>;
    LL: Readable<TF> & TF;
};
export declare const getI18nSvelteStore: <L extends string = string, T extends BaseTranslation | BaseTranslation[] = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>, F extends BaseFormatters = BaseFormatters>(baseLocale?: L) => SvelteStoreInit<L, T, TF, F>;
