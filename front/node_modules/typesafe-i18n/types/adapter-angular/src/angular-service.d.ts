import type { BaseFormatters, BaseTranslation, TranslationFunctions } from '../../core';
import type { AsyncFormattersInitializer, FormattersInitializer, TranslationLoader, TranslationLoaderAsync } from '../../runtime/src/util.loader';
export declare class I18nServiceRoot<L extends string = string, T extends BaseTranslation | BaseTranslation[] = BaseTranslation, TF extends TranslationFunctions<T> = TranslationFunctions<T>, F extends BaseFormatters = BaseFormatters> {
    private baseLocale;
    private getTranslationForLocale;
    private initFormatters;
    private _isLoadingLocale;
    private currentLocale;
    private _LL;
    constructor(baseLocale?: L, getTranslationForLocale?: TranslationLoader<L, T> | TranslationLoaderAsync<L, T>, initFormatters?: FormattersInitializer<L, F> | AsyncFormattersInitializer<L, F>);
    initI18n(locale?: L): Promise<void>;
    get isLoadingLocale(): boolean;
    get LL(): TF;
    get locale(): L;
    setLocale(newLocale: L): Promise<void>;
}
