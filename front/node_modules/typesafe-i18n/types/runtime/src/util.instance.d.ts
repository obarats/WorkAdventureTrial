import type { BaseFormatters, BaseTranslation, TranslationFunctions } from './core';
import type { FormattersInitializer, LocaleTranslationFunctions } from './util.loader';
export declare const i18n: <L extends string, T extends string[] | {
    [key: number]: string | string[] | any | {
        [key: string]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    } | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<{
        [key: string]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    }> | readonly BaseTranslation[];
} | {
    [key: string]: string | string[] | {
        [key: number]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    } | any | readonly string[] | BaseTranslation[] | Readonly<{
        [key: number]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    }> | Readonly<any> | readonly BaseTranslation[];
} | readonly string[] | BaseTranslation[] | Readonly<{
    [key: number]: string | string[] | any | {
        [key: string]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    } | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<{
        [key: string]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    }> | readonly BaseTranslation[];
}> | Readonly<{
    [key: string]: string | string[] | {
        [key: number]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    } | any | readonly string[] | BaseTranslation[] | Readonly<{
        [key: number]: string | string[] | any | any | readonly string[] | BaseTranslation[] | Readonly<any> | Readonly<any> | readonly BaseTranslation[];
    }> | Readonly<any> | readonly BaseTranslation[];
}> | readonly BaseTranslation[], TF extends TranslationFunctions<T>, F extends BaseFormatters>(getTranslationForLocale: (locale: L) => T, formattersInitializer: FormattersInitializer<L, F>) => LocaleTranslationFunctions<L, T, TF>;
