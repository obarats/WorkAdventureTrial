import type { Arguments, BaseFormatters, BaseTranslation, Locale, LocalizedString, TranslationFunctions, TranslationKey } from './core';
export declare type TranslateByKey<T extends BaseTranslation | BaseTranslation[]> = (key: TranslationKey<T>, ...args: Arguments) => LocalizedString;
export declare function i18nObject<L extends Locale, T extends BaseTranslation | BaseTranslation[] | Readonly<BaseTranslation> | Readonly<BaseTranslation[]>, TF extends TranslationFunctions<T> = TranslationFunctions<T>, F extends BaseFormatters = BaseFormatters>(locale: L, translations: T, formatters: F): TF;
export declare function i18nObject<L extends Locale, T extends BaseTranslation | BaseTranslation[], TF extends TranslationFunctions<T> = TranslationFunctions<T>>(locale: L, translations: T): TF;
