const t=t=>Object.fromEntries(Object.entries(t).map((([t,r])=>"i"!==t&&r&&"0"!=r&&[t,r])).filter(Boolean)),r=t=>Object.fromEntries(Object.keys(t).map((r=>{var i;const n=t[r];return[r,Array.isArray(n)?n.map((t=>null==t?void 0:t.trim())):n===!!n?n:null===(i=n)||void 0===i?void 0:i.trim()]}))),i=/(\{(?:[^{}]+|\{(?:[^{}]+)*\})*\})/g,n=t=>t.substring(1,t.length-1),e=(e,s=!0,o="",l="")=>e.split(i).map((t=>{if(!t.match(i))return t;const r=n(t);if(r.startsWith("{"))return((t,r)=>{let[i,n]=t.split(":");n||(n=i,i=r);const e=n.split("|"),[s,o,l,p,c,a]=e,m=e.filter((t=>void 0!==t)).length;return 1===m?{k:i,r:s}:2===m?{k:i,o:s,r:o}:3===m?{k:i,z:s,o:o,r:l}:{k:i,z:s,o:o,t:l,f:p,m:c,r:a}})(n(r),l);const e=(t=>{const[r="",...i]=t.split("|"),[n="",e]=r.split(":"),[s,o]=n.split("?");return{k:s,i:e,n:""===o,f:i}})(r);return l=e.k||l,!o&&(o=l),e})).map((i=>{if("string"==typeof i)return i;i.k||(i.k=o||"0");const n=r(i);return s?t(n):n}));export{e as parseRawText,t as removeEmptyValues,n as removeOuterBrackets,r as trimAllValues};
