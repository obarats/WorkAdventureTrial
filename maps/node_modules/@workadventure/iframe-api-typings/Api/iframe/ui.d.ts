import { IframeApiContribution } from "./IframeApiContribution";
import type { ButtonDescriptor } from "./Ui/ButtonDescriptor";
import { Popup } from "./Ui/Popup";
import { ActionMessage } from "./Ui/ActionMessage";
import { Menu } from "./Ui/Menu";
import type { RequireOnlyOne } from "../types";
interface MenuDescriptor {
    callback?: (commandDescriptor: string) => void;
    iframe?: string;
    allowApi?: boolean;
}
export declare type MenuOptions = RequireOnlyOne<MenuDescriptor, "callback" | "iframe">;
export interface ActionMessageOptions {
    message: string;
    type?: "message" | "warning";
    callback: () => void;
}
export declare class WorkAdventureUiCommands extends IframeApiContribution<WorkAdventureUiCommands> {
    callbacks: import("./IframeApiContribution").IframeCallbackContribution<keyof import("../Events/IframeEvent").IframeResponseEventMap>[];
    openPopup(targetObject: string, message: string, buttons: ButtonDescriptor[]): Popup;
    registerMenuCommand(commandDescriptor: string, options: MenuOptions | ((commandDescriptor: string) => void)): Menu;
    displayBubble(): void;
    removeBubble(): void;
    displayActionMessage(actionMessageOptions: ActionMessageOptions): ActionMessage;
}
declare const _default: WorkAdventureUiCommands;
export default _default;
